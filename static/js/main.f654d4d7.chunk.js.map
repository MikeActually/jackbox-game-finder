{"version":3,"sources":["data/GamesList/GamesList.js","components/GamesTable/GamesTableHeader.js","components/GamesTable/GameTableFilter.js","components/GamesTable/GamesTable.js","App.js","serviceWorker.js","index.js"],"names":["descendingComparator","a","b","orderBy","booleanComparator","getGamesList","params","order","playerCount","audience","gamesList","games","array","comparator","stabilizedThis","map","el","index","sort","stableSort","parseInt","isNaN","filter","game","minPlayers","maxPlayers","playerCountFilter","orderByField","useComparator","getComparator","forEach","element","packName","packs","pack","headLabels","GameListHeader","props","classes","onRequestSort","TableHead","TableRow","headCell","TableCell","key","id","align","numeric","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","visuallyHidden","GameTableFilter","onFilterPlayer","onAudienceFilter","onSubmit","preventDefault","target","elements","value","Grid","container","spacing","justify","alignItems","item","xs","sm","TextField","name","variant","onChange","FormControlLabel","control","Switch","color","size","checked","FormHelperText","useStyles","makeStyles","theme","border","clip","height","margin","overflow","padding","position","top","width","GamesTable","React","useState","setOrder","setOrderBy","setPlayerCount","setAudience","TableContainer","component","Paper","Table","table","aria-label","TableBody","row","labelId","scope","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f654d4d7.chunk.js","sourcesContent":["import games from './jackboxgames.json';\n\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction booleanComparator(a, b, orderBy) {\n    return (b[orderBy] === a[orderBy] ? 0 : (a[orderBy] === true ? 1 : -1));\n}\n\nfunction getComparator(order, orderBy) {\n    let orderByField = orderBy;\n    let useComparator = descendingComparator;\n    switch (orderBy) {\n        case 'playerCount':\n            orderByField = order === 'desc' ? 'maxPlayers' : 'minPlayers';\n            break;\n        case 'audience':\n            useComparator = booleanComparator;\n            break;\n        default:\n            break;\n    }\n    return order === 'desc'\n        ? (a, b) => useComparator(a, b, orderByField)\n        : (a, b) => -useComparator(a, b, orderByField);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n}\n\nfunction playerCountFilter(gamesList, playerCount, audience) {\n    playerCount = parseInt(playerCount);\n    if (!isNaN(playerCount)) {\n        gamesList = gamesList.filter(game => {\n            return (game.minPlayers <= playerCount\n                && game.maxPlayers >= playerCount) ||\n                (audience === true && playerCount > game.maxPlayers && game.audience === true);\n        });\n    }\n    return gamesList;\n}\n\nexport function getGamesList(params) {\n    const { order, orderBy, playerCount, audience } = params;\n    let gamesList = games.games;\n    gamesList = playerCountFilter(gamesList, playerCount, audience);\n    gamesList = stableSort(gamesList, getComparator(order, orderBy));\n    gamesList.forEach((element, index) => {\n        gamesList[index].packName = games.packs[element.pack];\n    });\n    return gamesList;\n}","import React from 'react';\nimport { TableHead, TableRow, TableCell, TableSortLabel } from '@material-ui/core';\n\nconst headLabels = [\n    { 'id': 'name', 'label': 'Name' },\n    { 'id': 'pack', 'numeric': true, 'label': 'Pack' },\n    { 'id': 'playerCount', 'numeric': true, 'label': 'Player Count' },\n    { 'id': 'audience', 'numeric': true, 'label': 'Audience' }\n];\n\nexport default function GameListHeader(props) {\n    const { orderBy, order, classes, onRequestSort } = props;\n    const createSortHandler = property => event => {\n        onRequestSort(event, property);\n    };\n    return (\n        <TableHead>\n            <TableRow>{\n                headLabels.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        sortDirection={orderBy === headCell.id ? order : false}>\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>))\n            }\n            </TableRow>\n        </TableHead>);\n};","import React from 'react';\nimport { TextField, Grid, Switch, FormControlLabel, FormHelperText } from '@material-ui/core';\n\nexport default function GameTableFilter(props) {\n    const { onFilterPlayer, onAudienceFilter } = props;\n    const onSubmit = (event) => {\n        event.preventDefault();\n        onFilterPlayer(event.target.elements.playerCount.value);\n    };\n    const onPlayerCountChange = (event) => {\n        onFilterPlayer(event.target.value);\n    };\n    const onAudienceToggle = (event) => {\n        onAudienceFilter(event.target.checked);\n    };\n    return (\n        <form onSubmit={onSubmit}>\n            <Grid container spacing={1}\n                direction=\"row\"\n                justify=\"flex-start\"\n                alignItems=\"center\">\n                <Grid item container xs={12} sm={6} spacing={3} justify=\"flex-end\">\n                    <Grid item xs={12}>\n                        <TextField\n                            name=\"playerCount\"\n                            label=\"Player Count\"\n                            variant=\"outlined\"\n                            onChange={onPlayerCountChange} />\n                    </Grid>\n                    <Grid item xs={11}>\n                        <FormControlLabel\n                            control={\n                                <Switch\n                                    name=\"audience\"\n                                    color=\"primary\"\n                                    size=\"small\"\n                                    onChange={onAudienceToggle}\n                                />\n                            }\n                            label=\"Overflow to Audience?\"\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormHelperText>When toggle is on and your player count exceeds the maximum for a game, then games displayed will also allow player count to overflow into audience </FormHelperText>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </form>\n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { getGamesList } from '../../data/GamesList/GamesList';\nimport GameListHeader from './GamesTableHeader';\nimport GameTableFilter from './GameTableFilter';\nimport { Grid } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default function GamesTable() {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('pack');\n    const [playerCount, setPlayerCount] = React.useState('');\n    const [audience, setAudience] = React.useState(false);\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n    const handlePlayerFilter = (value) => {\n        setPlayerCount(value);\n    };\n    const handleAudience = (value) => {\n        setAudience(value);\n    };\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <GameTableFilter onFilterPlayer={handlePlayerFilter} onAudienceFilter={handleAudience} audience />\n            </Grid>\n            <Grid item xs={12}>\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <GameListHeader\n                            orderBy={orderBy}\n                            order={order}\n                            classes={classes}\n                            onRequestSort={handleRequestSort}\n                        />\n                        <TableBody>\n                            {getGamesList({ order, orderBy, playerCount, audience })\n                                .map((row, index) => {\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n                                    return (\n                                        <TableRow key={labelId}>\n                                            <TableCell component=\"th\" scope=\"row\">\n                                                {row.name}\n                                            </TableCell>\n                                            <TableCell align=\"right\">{row.packName}</TableCell>\n                                            <TableCell align=\"right\">{row.minPlayers}-{row.maxPlayers}</TableCell>\n                                            <TableCell align=\"right\">{row.audience ? 'Yes' : 'No'}</TableCell>\n                                        </TableRow>);\n                                })}\n                        </TableBody>\n                    </Table>\n                </TableContainer >\n            </Grid>\n        </Grid>\n    );\n}","import React from 'react';\nimport GamesTable from './components/GamesTable/GamesTable';\nimport { Container } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <h1>Jackbox Game Finder</h1>\n      <GamesTable />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}