{"version":3,"sources":["data/GamesList/GamesList.js","components/GamesTable/GamesTableHeader.js","components/GamesTable/GameTableFilter.js","components/GamesTable/GamesTable.js","App.js","serviceWorker.js","index.js"],"names":["descendingComparator","a","b","orderBy","booleanComparator","getGamesList","params","order","playerCount","gamesList","games","array","comparator","stabilizedThis","map","el","index","sort","stableSort","parseInt","isNaN","filter","game","minPlayers","maxPlayers","audience","playerCountFilter","orderByField","useComparator","getComparator","forEach","element","packName","packs","pack","headLabels","GameListHeader","props","classes","onRequestSort","TableHead","TableRow","headCell","TableCell","key","id","align","numeric","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","visuallyHidden","GameTableFilter","onFilterPlayer","style","TextField","variant","onChange","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","border","clip","height","margin","overflow","padding","position","top","GamesTable","React","useState","setOrder","setOrderBy","setPlayerCount","target","value","TableContainer","component","Paper","Table","table","aria-label","TableBody","row","labelId","scope","name","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ae9f82c.chunk.js","sourcesContent":["import games from './jackboxgames.json';\n\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction booleanComparator(a, b, orderBy) {\n    return (b[orderBy] === a[orderBy] ? 0 : (a[orderBy] === true ? 1 : -1));\n}\n\nfunction getComparator(order, orderBy) {\n    let orderByField = orderBy;\n    let useComparator = descendingComparator;\n    switch (orderBy) {\n        case 'playerCount':\n            orderByField = order === 'desc' ? 'maxPlayers' : 'minPlayers';\n            break;\n        case 'audience':\n            useComparator = booleanComparator;\n            break;\n        default:\n            break;\n    }\n    return order === 'desc'\n        ? (a, b) => useComparator(a, b, orderByField)\n        : (a, b) => -useComparator(a, b, orderByField);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n}\n\nfunction playerCountFilter(gamesList, playerCount) {\n    playerCount = parseInt(playerCount);\n    if (!isNaN(playerCount)) {\n        gamesList = gamesList.filter(game => {\n            return (game.minPlayers <= playerCount\n                && game.maxPlayers >= playerCount) ||\n                (playerCount > game.maxPlayers && game.audience === true);\n        });\n    }\n    return gamesList;\n}\n\nexport function getGamesList(params) {\n    const { order, orderBy, playerCount } = params;\n    let gamesList = games.games;\n    gamesList = playerCountFilter(gamesList, playerCount);\n    gamesList = stableSort(gamesList, getComparator(order, orderBy));\n    gamesList.forEach((element, index) => {\n        gamesList[index].packName = games.packs[element.pack];\n    });\n    return gamesList;\n}","import React from 'react';\nimport { TableHead, TableRow, TableCell, TableSortLabel } from '@material-ui/core';\n\nconst headLabels = [\n    { 'id': 'name', 'label': 'Name' },\n    { 'id': 'pack', 'numeric': true, 'label': 'Pack' },\n    { 'id': 'playerCount', 'numeric': true, 'label': 'Player Count' },\n    { 'id': 'audience', 'numeric': true, 'label': 'Audience' }\n];\n\nexport default function GameListHeader(props) {\n    const { orderBy, order, classes, onRequestSort } = props;\n    const createSortHandler = property => event => {\n        onRequestSort(event, property);\n    };\n    return (\n        <TableHead>\n            <TableRow>{\n                headLabels.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        sortDirection={orderBy === headCell.id ? order : false}>\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>))\n            }\n            </TableRow>\n        </TableHead>);\n};","import React from 'react';\nimport { TextField } from '@material-ui/core';\n\nexport default function GameTableFilter(props) {\n    const { onFilterPlayer } = props;\n    return (\n        <div style={{ 'textAlign': 'left' }}>\n            <form>\n                <TextField\n                    id=\"playerCount\"\n                    label=\"Number of Players\"\n                    variant=\"outlined\"\n                    onChange={onFilterPlayer} />\n            </form>\n        </div>\n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { getGamesList } from '../../data/GamesList/GamesList';\nimport GameListHeader from './GamesTableHeader';\nimport GameTableFilter from './GameTableFilter';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default function GamesTable() {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('pack');\n    const [playerCount, setPlayerCount] = React.useState('playerCount');\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n    const handlePlayerFilter = (event) => {\n        setPlayerCount(event.target.value);\n    };\n    return (\n        <div>\n            <GameTableFilter onFilterPlayer={handlePlayerFilter} />\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <GameListHeader\n                        orderBy={orderBy}\n                        order={order}\n                        classes={classes}\n                        onRequestSort={handleRequestSort}\n                    />\n                    <TableBody>\n                        {getGamesList({ order, orderBy, playerCount })\n                            .map((row, index) => {\n                                const labelId = `enhanced-table-checkbox-${index}`;\n                                return (\n                                    <TableRow key={labelId}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {row.name}\n                                        </TableCell>\n                                        <TableCell align=\"right\">{row.packName}</TableCell>\n                                        <TableCell align=\"right\">{row.minPlayers}-{row.maxPlayers}</TableCell>\n                                        <TableCell align=\"right\">{row.audience ? 'Yes' : 'No'}</TableCell>\n                                    </TableRow>);\n                            })}\n                    </TableBody>\n                </Table>\n            </TableContainer >\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport GamesTable from './components/GamesTable/GamesTable';\nimport { Container } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <div className=\"App\">\n        <h1>\n          Jackbox Game Finder\n      </h1>\n        <GamesTable />\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}