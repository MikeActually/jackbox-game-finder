{"version":3,"sources":["components/GamesTable/GamesTableHeader.js","components/GamesTable/GamesTable.js","components/GamesTable/GameTableFilter.js","data/GamesList/GamesList.js","components/RandomGame/RandomGame.js","pages/JackboxGames/JackboxGames.js","App.js","serviceWorker.js","index.js"],"names":["headLabels","GameListHeader","props","orderBy","order","classes","onRequestSort","TableHead","TableRow","map","headCell","TableCell","key","id","align","numeric","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","visuallyHidden","useStyles","makeStyles","theme","border","clip","height","margin","overflow","padding","position","top","width","GamesTable","handleRequestSort","gamesList","TableContainer","component","Paper","Table","table","aria-label","TableBody","row","index","labelId","scope","name","packName","minPlayers","maxPlayers","audience","GameTableFilter","onFilterPlayer","onAudienceFilter","onSubmit","preventDefault","target","elements","playerCount","value","Grid","container","spacing","justify","item","xs","TextField","variant","onChange","FormControlLabel","control","Switch","color","size","checked","FormHelperText","descendingComparator","a","b","booleanComparator","getGamesList","params","games","array","comparator","stabilizedThis","el","sort","stableSort","parseInt","isNaN","filter","game","playerCountFilter","orderByField","useComparator","getComparator","forEach","element","packs","pack","randomButton","textTransform","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","boxShadow","shadows","RandomGame","React","useState","randomGame","setRandomGame","open","setOpen","handleOpen","Modal","aria-labelledby","aria-describedby","onClose","Button","randomInt","Math","floor","random","length","JackboxGames","setOrder","setOrderBy","setPlayerCount","setAudience","sm","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5384b60.chunk.js","sourcesContent":["import React from 'react';\nimport { TableHead, TableRow, TableCell, TableSortLabel } from '@material-ui/core';\n\nconst headLabels = [\n    { 'id': 'name', 'label': 'Name' },\n    { 'id': 'pack', 'numeric': true, 'label': 'Pack' },\n    { 'id': 'playerCount', 'numeric': true, 'label': 'Player Count' },\n    { 'id': 'audience', 'numeric': true, 'label': 'Audience' }\n];\n\nexport default function GameListHeader(props) {\n    const { orderBy, order, classes, onRequestSort } = props;\n    const createSortHandler = property => event => {\n        onRequestSort(event, property);\n    };\n    return (\n        <TableHead>\n            <TableRow>{\n                headLabels.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        sortDirection={orderBy === headCell.id ? order : false}>\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>))\n            }\n            </TableRow>\n        </TableHead>);\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport GameListHeader from './GamesTableHeader';\n\nconst useStyles = makeStyles(theme => ({\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default function GamesTable(props) {\n    const { handleRequestSort, gamesList, order, orderBy } = props;\n    const classes = useStyles();\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <GameListHeader\n                    orderBy={orderBy}\n                    order={order}\n                    classes={classes}\n                    onRequestSort={handleRequestSort}\n                />\n                <TableBody>\n                    {gamesList.map((row, index) => {\n                        const labelId = `enhanced-table-checkbox-${index}`;\n                        return (\n                            <TableRow key={labelId}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.name}\n                                </TableCell>\n                                <TableCell align=\"right\">{row.packName}</TableCell>\n                                <TableCell align=\"right\">{row.minPlayers}-{row.maxPlayers}</TableCell>\n                                <TableCell align=\"right\">{row.audience ? 'Yes' : 'No'}</TableCell>\n                            </TableRow>);\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer >\n    );\n}","import React from 'react';\nimport { TextField, Grid, Switch, FormControlLabel, FormHelperText } from '@material-ui/core';\n\nexport default function GameTableFilter(props) {\n    const { onFilterPlayer, onAudienceFilter } = props;\n    const onSubmit = (event) => {\n        event.preventDefault();\n        onFilterPlayer(event.target.elements.playerCount.value);\n    };\n    const onPlayerCountChange = (event) => {\n        onFilterPlayer(event.target.value);\n    };\n    const onAudienceToggle = (event) => {\n        onAudienceFilter(event.target.checked);\n    };\n    return (\n        <form onSubmit={onSubmit}>\n            <Grid container spacing={3} justify=\"flex-end\">\n                <Grid item xs={12}>\n                    <TextField\n                        name=\"playerCount\"\n                        label=\"Player Count\"\n                        variant=\"outlined\"\n                        onChange={onPlayerCountChange} />\n                </Grid>\n                <Grid item xs={11}>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                name=\"audience\"\n                                color=\"primary\"\n                                size=\"small\"\n                                onChange={onAudienceToggle}\n                            />\n                        }\n                        label=\"Overflow to Audience?\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <FormHelperText>When toggle is on and your player count exceeds the maximum for a game, then games displayed will also allow player count to overflow into audience </FormHelperText>\n                </Grid>\n            </Grid>\n        </form>\n    )\n}","import games from './jackboxgames.json';\n\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction booleanComparator(a, b, orderBy) {\n    return (b[orderBy] === a[orderBy] ? 0 : (a[orderBy] === true ? 1 : -1));\n}\n\nfunction getComparator(order, orderBy) {\n    let orderByField = orderBy;\n    let useComparator = descendingComparator;\n    switch (orderBy) {\n        case 'playerCount':\n            orderByField = order === 'desc' ? 'maxPlayers' : 'minPlayers';\n            break;\n        case 'audience':\n            useComparator = booleanComparator;\n            break;\n        default:\n            break;\n    }\n    return order === 'desc'\n        ? (a, b) => useComparator(a, b, orderByField)\n        : (a, b) => -useComparator(a, b, orderByField);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n}\n\nfunction playerCountFilter(gamesList, playerCount, audience) {\n    playerCount = parseInt(playerCount);\n    if (!isNaN(playerCount)) {\n        gamesList = gamesList.filter(game => {\n            return (game.minPlayers <= playerCount\n                && game.maxPlayers >= playerCount) ||\n                (audience === true && playerCount > game.maxPlayers && game.audience === true);\n        });\n    }\n    return gamesList;\n}\n\nexport function getGamesList(params) {\n    const { order, orderBy, playerCount, audience } = params;\n    let gamesList = games.games;\n    gamesList = playerCountFilter(gamesList, playerCount, audience);\n    gamesList = stableSort(gamesList, getComparator(order, orderBy));\n    gamesList.forEach((element, index) => {\n        gamesList[index].packName = games.packs[element.pack];\n    });\n    return gamesList;\n}","import React from 'react';\nimport { Button, Modal } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    randomButton: {\n        textTransform: \"uppercase\"\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nexport default function RandomGame(props) {\n    const { getGamesList } = props;\n    const [randomGame, setRandomGame] = React.useState('');\n    const classes = useStyles();\n    const getRandomGame = (event) => {\n        const gamesList = getGamesList();\n        const randomInt = Math.floor(Math.random() * gamesList.length);\n        if (gamesList.length > 0) {\n            setRandomGame(gamesList[randomInt]);\n        }\n        handleOpen();\n    }\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    return (\n        <div>\n            <Modal\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                open={open}\n                onClose={handleClose}\n                className={classes.modal}\n            >\n                <div className={classes.paper}>\n                    <h2 id=\"simple-modal-title\">{randomGame}</h2>\n                </div>\n            </Modal>\n            <Button className={classes.randomButton} variant=\"contained\" color=\"primary\" onClick={getRandomGame}>Get a random game!</Button>\n        </div>\n    );\n}","import React from 'react';\nimport GamesTable from '../../components/GamesTable/GamesTable';\nimport GameTableFilter from '../../components/GamesTable/GameTableFilter';\nimport { Grid } from '@material-ui/core';\nimport { getGamesList } from '../../data/GamesList/GamesList';\nimport RandomGame from '../../components/RandomGame/RandomGame';\n\nexport default function JackboxGames() {\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('pack');\n    const [playerCount, setPlayerCount] = React.useState('');\n    const [audience, setAudience] = React.useState(false);\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n    const handlePlayerFilter = (value) => {\n        setPlayerCount(value);\n    };\n    const handleAudience = (value) => {\n        setAudience(value);\n    };\n    const gamesList = getGamesList({ order, orderBy, playerCount, audience });\n    const getCurrentGamesList = () => {\n        return gamesList.map(game => {\n            return game.name;\n        });\n    };\n    return (\n        <Grid container spacing={3}>\n            <Grid item container xs={12} spacing={1}\n                direction=\"row\"\n                justify=\"flex-start\"\n                alignItems=\"flex-start\">\n                <Grid item xs={12} sm={6}>\n                    <GameTableFilter onFilterPlayer={handlePlayerFilter} onAudienceFilter={handleAudience} audience />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                    <RandomGame getGamesList={getCurrentGamesList} />\n                </Grid>\n            </Grid>\n            <Grid item xs={12}>\n                <GamesTable gamesList={gamesList} order={order} orderBy={orderBy} handleRequestSort={handleRequestSort} />\n            </Grid>\n        </Grid>\n    );\n}","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport JackboxGames from './pages/JackboxGames/JackboxGames';\n\nfunction App() {\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <h1>Jackbox Game Finder</h1>\n      <JackboxGames />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}