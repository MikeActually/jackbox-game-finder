{"version":3,"sources":["data/GamesList/GamesList.js","components/GamesTable/GamesTable.js","App.js","serviceWorker.js","index.js"],"names":["descendingComparator","a","b","orderBy","getGamesList","params","order","sortedGames","array","comparator","stabilizedThis","map","el","index","sort","stableSort","games","orderByField","getComparator","forEach","element","packName","packs","pack","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","headLabels","GameListHeader","props","classes","onRequestSort","TableHead","TableRow","headCell","TableCell","key","id","align","numeric","sortDirection","TableSortLabel","active","direction","onClick","property","event","label","className","GamesTable","React","useState","setOrder","setOrderBy","TableContainer","component","Paper","Table","table","aria-label","TableBody","row","labelId","scope","name","minPlayers","maxPlayers","audience","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd41b592.chunk.js","sourcesContent":["import games from './jackboxgames.json';\n\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\nfunction getComparator(order, orderBy) {\n    let orderByField;\n    switch (orderBy) {\n        case 'playerCount':\n            orderByField = order === 'desc' ? 'maxPlayers' : 'minPlayers';\n            break;\n        default:\n            orderByField = orderBy;\n            break;\n    }\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderByField)\n        : (a, b) => -descendingComparator(a, b, orderByField);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n}\n\nexport function getGamesList(params) {\n    const { order, orderBy } = params;\n    const sortedGames = stableSort(games.games, getComparator(order, orderBy));\n    sortedGames.forEach((element, index) => {\n        sortedGames[index].packName = games.packs[element.pack];\n    });\n    return sortedGames;\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { getGamesList } from '../../data/GamesList/GamesList';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nconst headLabels = [\n    { 'id': 'name', 'label': 'Name' },\n    { 'id': 'pack', 'numeric': true, 'label': 'Pack' },\n    { 'id': 'playerCount', 'numeric': true, 'label': 'Player Count' },\n    { 'id': 'audience', 'numeric': true, 'label': 'Audience' }\n];\n\nfunction GameListHeader(props) {\n    const { orderBy, order, classes, onRequestSort } = props;\n    const createSortHandler = property => event => {\n        onRequestSort(event, property);\n    };\n    return (\n        <TableHead>\n            <TableRow>{\n                headLabels.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        sortDirection={orderBy === headCell.id ? order : false}>\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>))\n            }\n            </TableRow>\n        </TableHead>);\n};\nexport default function GamesTable() {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('game');\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <GameListHeader\n                    orderBy={orderBy}\n                    order={order}\n                    classes={classes}\n                    onRequestSort={handleRequestSort}\n                />\n                <TableBody>\n                    {getGamesList({ order, orderBy })\n                        .map((row, index) => {\n                            const labelId = `enhanced-table-checkbox-${index}`;\n                            return (\n                                <TableRow key={labelId}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {row.name}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{row.packName}</TableCell>\n                                    <TableCell align=\"right\">{row.minPlayers}-{row.maxPlayers}</TableCell>\n                                    <TableCell align=\"right\">{row.audience ? 'Yes' : 'No'}</TableCell>\n                                </TableRow>);\n                        })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}","import React from 'react';\nimport './App.css';\nimport GamesTable from './components/GamesTable/GamesTable';\nimport { Container } from '@material-ui/core';\n\nfunction App() {\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <div className=\"App\">\n        <h1>\n          Jackbox Game Finder\n      </h1>\n        <GamesTable />\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}