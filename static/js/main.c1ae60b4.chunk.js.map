{"version":3,"sources":["components/GamesTable/GamesTableHeader.js","components/GamesTable/GamesTable.js","components/GamesTable/GamePackFilter.js","components/GamesTable/GameTableFilter.js","data/GamesList/GamesList.js","components/RandomGame/RandomGame.js","pages/JackboxGames/JackboxGames.js","App.js","serviceWorker.js","index.js"],"names":["headLabels","GameListHeader","props","orderBy","order","classes","onRequestSort","TableHead","TableRow","map","headCell","TableCell","align","numeric","sortDirection","id","TableSortLabel","active","direction","onClick","property","event","label","className","visuallyHidden","useStyles","makeStyles","theme","border","clip","height","margin","overflow","padding","position","top","width","GamesTable","handleRequestSort","gamesList","TableContainer","component","Paper","Table","table","TableBody","row","index","labelId","scope","name","packName","minPlayers","maxPlayers","audience","GamePackFilter","packs","checkedPacks","onPackToggle","List","Object","keys","packKey","ListItem","role","undefined","dense","button","ListItemIcon","Checkbox","edge","checked","indexOf","tabIndex","disableRipple","inputProps","color","ListItemText","primary","GameTableFilter","onFilterPlayer","onAudienceFilter","onTogglePackChecked","onSubmit","preventDefault","target","elements","playerCount","value","Grid","container","spacing","justifyContent","item","xs","sm","TextField","variant","onChange","type","FormControlLabel","control","Switch","size","FormHelperText","descendingComparator","a","b","booleanComparator","getGamesList","params","games","filter","game","pack","packFilter","parseInt","isNaN","playerCountFilter","array","comparator","stabilizedThis","el","sort","stableSort","orderByField","useComparator","getComparator","forEach","element","randomButton","textTransform","RandomGame","React","useState","randomGame","setRandomGame","open","setOpen","handleOpen","gameName","players","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","Button","randomInt","Math","floor","random","length","root","JackboxGames","setOrder","setOrderBy","setPlayerCount","setAudience","packsList","setCheckedPacks","Accordion","AccordionSummary","expandIcon","Typography","AccordionDetails","currentIndex","newChecked","push","splice","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1ae60b4.chunk.js","sourcesContent":["import React from 'react';\nimport { TableHead, TableRow, TableCell, TableSortLabel } from '@material-ui/core';\n\nconst headLabels = [\n    { 'id': 'name', 'label': 'Name' },\n    { 'id': 'pack', 'numeric': true, 'label': 'Pack' },\n    { 'id': 'playerCount', 'numeric': true, 'label': 'Player Count' },\n    { 'id': 'audience', 'numeric': true, 'label': 'Audience' }\n];\n\nexport default function GameListHeader(props) {\n    const { orderBy, order, classes, onRequestSort } = props;\n    const createSortHandler = property => event => {\n        onRequestSort(event, property);\n    };\n    return (\n        <TableHead>\n            <TableRow>{\n                headLabels.map(headCell => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        sortDirection={orderBy === headCell.id ? order : false}>\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>))\n            }\n            </TableRow>\n        </TableHead>);\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport GameListHeader from './GamesTableHeader';\n\nconst useStyles = makeStyles(theme => ({\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nexport default function GamesTable(props) {\n    const { handleRequestSort, gamesList, order, orderBy } = props;\n    const classes = useStyles();\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <GameListHeader\n                    orderBy={orderBy}\n                    order={order}\n                    classes={classes}\n                    onRequestSort={handleRequestSort}\n                />\n                <TableBody>\n                    {gamesList.map((row, index) => {\n                        const labelId = `enhanced-table-checkbox-${index}`;\n                        return (\n                            <TableRow key={labelId}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.name}\n                                </TableCell>\n                                <TableCell align=\"right\">{row.packName}</TableCell>\n                                <TableCell align=\"right\">{row.minPlayers}-{row.maxPlayers}</TableCell>\n                                <TableCell align=\"right\">{row.audience ? 'Yes' : 'No'}</TableCell>\n                            </TableRow>);\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer >\n    );\n}","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nexport default function GamePackFilter(props) {\n    const { packs, checkedPacks, onPackToggle } = props;\n    return (\n        <List>\n            {Object.keys(packs).map(packKey => {\n                const labelId = `checkbox-list-label-${packKey}`;\n                return (\n                    <ListItem key={packKey} role={undefined} dense button onClick={onPackToggle(packKey)}>\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={checkedPacks.indexOf(packKey) !== -1}\n                                tabIndex={-1}\n                                disableRipple\n                                inputProps={{ 'aria-labelledby': labelId }}\n                                color=\"primary\"\n                            />\n                        </ListItemIcon>\n                        <ListItemText id={labelId} primary={packs[packKey]} />\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n}\n","import React from 'react';\nimport { TextField, Grid, Switch, FormControlLabel, FormHelperText } from '@material-ui/core';\nimport GamePackFilter from './GamePackFilter';\n\nexport default function GameTableFilter(props) {\n    const { onFilterPlayer, onAudienceFilter, onTogglePackChecked, packs, checkedPacks } = props;\n    const onSubmit = (event) => {\n        event.preventDefault();\n        onFilterPlayer(event.target.elements.playerCount.value);\n    };\n    const onPlayerCountChange = (event) => {\n        onFilterPlayer(event.target.value);\n    };\n    const onAudienceToggle = (event) => {\n        onAudienceFilter(event.target.checked);\n    };\n    const onPackToggle = value => () => {\n        onTogglePackChecked(value);\n    };\n    return (\n        <form onSubmit={onSubmit}>\n            <Grid container spacing={3} justifyContent=\"flex-start\">\n                <Grid item container spacing={3} justifyContent=\"flex-start\" xs={12} sm={6}>\n                    <Grid item xs={12}>\n                        <TextField\n                            name=\"playerCount\"\n                            label=\"Player Count\"\n                            variant=\"outlined\"\n                            onChange={onPlayerCountChange}\n                            type=\"number\" />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormControlLabel\n                            control={\n                                <Switch\n                                    name=\"audience\"\n                                    color=\"primary\"\n                                    size=\"small\"\n                                    onChange={onAudienceToggle}\n                                />\n                            }\n                            label=\"Overflow to Audience?\"\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormHelperText>When toggle is on and your player count exceeds the maximum for a game, then games displayed will also allow player count to overflow into audience </FormHelperText>\n                    </Grid>\n                </Grid>\n                <Grid>\n                    <GamePackFilter\n                        packs={packs}\n                        onPackToggle={onPackToggle}\n                        checkedPacks={checkedPacks} />\n                </Grid>\n            </Grid>\n        </form>\n    );\n}","import games from './jackboxgames.json';\n\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction booleanComparator(a, b, orderBy) {\n    return (b[orderBy] === a[orderBy] ? 0 : (a[orderBy] === true ? 1 : -1));\n}\n\nfunction getComparator(order, orderBy) {\n    let orderByField = orderBy;\n    let useComparator = descendingComparator;\n    switch (orderBy) {\n        case 'playerCount':\n            orderByField = order === 'desc' ? 'maxPlayers' : 'minPlayers';\n            break;\n        case 'audience':\n            useComparator = booleanComparator;\n            break;\n        default:\n            break;\n    }\n    return order === 'desc'\n        ? (a, b) => useComparator(a, b, orderByField)\n        : (a, b) => -useComparator(a, b, orderByField);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n}\n\nfunction playerCountFilter(gamesList, playerCount, audience) {\n    playerCount = parseInt(playerCount);\n    if (!isNaN(playerCount)) {\n        gamesList = gamesList.filter(game => {\n            return (game.minPlayers <= playerCount\n                && game.maxPlayers >= playerCount) ||\n                (audience === true && playerCount > game.maxPlayers && game.audience === true);\n        });\n    }\n    return gamesList;\n}\n\nfunction packFilter(gamesList, checkedPacks) {\n    return gamesList.filter(game => {\n        return checkedPacks.indexOf(game.pack) !== -1;\n    });\n}\n\nexport function getGamesList(params) {\n    const { order, orderBy, playerCount, audience, checkedPacks } = params;\n    let gamesList = games.games;\n    gamesList = packFilter(gamesList, checkedPacks);\n    gamesList = playerCountFilter(gamesList, playerCount, audience);\n    gamesList = stableSort(gamesList, getComparator(order, orderBy));\n    gamesList.forEach((element, index) => {\n        gamesList[index].packName = games.packs[element.pack];\n    });\n    return gamesList;\n}\n\nexport function getPacksList() {\n    return games.packs;\n}","import React from 'react';\nimport { Button, Dialog, DialogTitle, DialogContentText, DialogContent } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    randomButton: {\n        textTransform: \"uppercase\"\n    }\n}));\n\nexport default function RandomGame(props) {\n    const { gamesList } = props;\n    const [randomGame, setRandomGame] = React.useState('');\n    const classes = useStyles();\n    const getRandomGame = (event) => {\n        const randomInt = Math.floor(Math.random() * gamesList.length);\n        if (gamesList.length > 0) {\n            setRandomGame(gamesList[randomInt]);\n        }\n        handleOpen();\n    }\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    const gameName = randomGame ? randomGame.name : 'No game found.';\n    const packName = randomGame ? randomGame.packName : 'Please refine your filters';\n    const players = randomGame ? `Players: ${randomGame.minPlayers}-${randomGame.maxPlayers}` : '';\n    const audience = randomGame ? `Audience: ${randomGame.audience === true ? 'Yes' : 'No'}` : '';\n    return (\n        <div>\n            <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n                {gameName && <DialogTitle id=\"simple-dialog-title\">{gameName}</DialogTitle>}\n                <DialogContent>\n                    {packName && <DialogContentText>{packName}</DialogContentText>}\n                    {players && <DialogContentText>{players}</DialogContentText>}\n                    {audience && <DialogContentText>{audience}</DialogContentText>}\n                </DialogContent>\n            </Dialog>\n            <Button className={classes.randomButton} variant=\"contained\" color=\"primary\" onClick={getRandomGame}>Get a random game!</Button>\n        </div >\n    );\n}","import React from 'react';\nimport GamesTable from '../../components/GamesTable/GamesTable';\nimport GameTableFilter from '../../components/GamesTable/GameTableFilter';\nimport { Accordion, AccordionSummary, AccordionDetails, Typography } from '@material-ui/core';\nimport { getGamesList, getPacksList } from '../../data/GamesList/GamesList';\nimport RandomGame from '../../components/RandomGame/RandomGame';\nimport FilterList from '@material-ui/icons/FilterList';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nexport default function JackboxGames() {\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('pack');\n    const [playerCount, setPlayerCount] = React.useState('');\n    const [audience, setAudience] = React.useState(false);\n    const packsList = getPacksList();\n    const [checkedPacks, setCheckedPacks] = React.useState(Object.keys(packsList));\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n    const handlePlayerFilter = (value) => {\n        setPlayerCount(value);\n    };\n    const handleAudience = (value) => {\n        setAudience(value);\n    };\n    const handlePackChecked = (value) => {\n        const currentIndex = checkedPacks.indexOf(value);\n        const newChecked = [...checkedPacks];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n        setCheckedPacks(newChecked);\n    }\n    const gamesList = getGamesList({ order, orderBy, playerCount, audience, checkedPacks });\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <RandomGame gamesList={gamesList} />\n            <Accordion>\n                <AccordionSummary\n                    expandIcon={<FilterList />}>\n                    <Typography>Filter Games</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <GameTableFilter\n                        onFilterPlayer={handlePlayerFilter}\n                        onAudienceFilter={handleAudience}\n                        onTogglePackChecked={handlePackChecked}\n                        packs={packsList}\n                        checkedPacks={checkedPacks}\n                        audience />\n                </AccordionDetails>\n            </Accordion>\n            <GamesTable\n                gamesList={gamesList}\n                order={order}\n                orderBy={orderBy}\n                handleRequestSort={handleRequestSort} />\n        </div>\n    );\n}","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport JackboxGames from './pages/JackboxGames/JackboxGames';\n\nfunction App() {\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <h1>Jackbox Game Finder</h1>\n      <JackboxGames />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}